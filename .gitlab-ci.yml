stages:
  - validate

variables:
  TF_ROOT: terraform
  TF_PLAN: plan.cache
  TF_STATE_NAME: production
  PLAYBOOK_ROOT: playbook
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# TODO pypi cache
cache:
  - key: $TF_ROOT
    paths:
      - $TF_ROOT/.terraform/
  - paths:
      - .cache/pip

.terraform:
  image: debian:bookworm-slim
  variables:
    TF_VERSION: 1.6.5
    TF_VAR_provisioning_authorized_keys: $SSH_PUBLIC_KEY
    TF_HTTP_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}
    TF_HTTP_LOCK_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}/lock
    TF_HTTP_LOCK_METHOD: POST
    TF_HTTP_UNLOCK_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}/lock
    TF_HTTP_UNLOCK_METHOD: DELETE
    TF_HTTP_USERNAME: gitlab-ci-token
    TF_HTTP_PASSWORD: ${CI_JOB_TOKEN}
    TF_HTTP_RETRY_WAIT_MIN: 5
  before_script:
    - apt-get update
    - apt-get install --yes wget unzip git jq
    - wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
    - cd "$TF_ROOT"
    - unzip /tmp/terraform.zip
    - mv terraform /usr/local/bin
    - terraform init

.ansible:
  image: python:3.12.0-slim-bookworm
  variables:
    ANSIBLE_HOST_KEY_CHECKING: "0"
    # Needed for inventory plugin.
    TF_HTTP_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}
    TF_HTTP_USERNAME: gitlab-ci-token
    TF_HTTP_PASSWORD: ${CI_JOB_TOKEN}
  before_script:
    - apt-get update
    - apt-get install --yes git
    - cd "$PLAYBOOK_ROOT"
    - pip install -r requirements.txt
    - ansible-galaxy install -r requirements.yaml

format-terraform:
  extends: .terraform
  stage: validate
  script:
    - terraform fmt -check

validate-terraform:
  extends: .terraform
  stage: validate
  script:
    - terraform validate

lint-ansible:
  extends: .ansible
  stage: validate
  script:
    - ansible-lint main.yaml
